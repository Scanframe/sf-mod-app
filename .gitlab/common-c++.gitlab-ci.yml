# Order of stages for jobs to perform in.
stages:
  # Jobs checking the environment requirements.
  - check
  # Jobs producing makefiles using CMake for all targets without tests.
  - make
  # Jobs for building the actual run target and possible dynamic libraries using.
  - build
  # Jobs producing makefiles including the tests using CMake
  - make-test
  # Jobs for building tests using dynamic libraries of the build.
  - build-test
  # Jobs executing the build (unit-)tests.
  - test
  # Jobs for deploying of stored artifacts.
  - deploy

# Some variables used to config this include-file.
variables:
  # Name of the branch that allows running deploying to production.
  SF_RELEASE_BRANCH_NAME: "master"
  # Fixed directory the source root is mounted to.
  SF_DIR_BIN_GNU: "bin/"
  SF_DIR_BIN_GW: "binwin/"
  # Fixed directory the source root is mounted to.
  SF_DIR_MOUNT_GNU: "/tmp/build-gnu-${CI_COMMIT_SHORT_SHA}"
  SF_DIR_MOUNT_GW: "/tmp/build-gw-${CI_COMMIT_SHORT_SHA}"
  # Logger tag value.
  SF_LOG_TAG: "=== ${CI_JOB_NAME_SLUG}.${CI_COMMIT_SHORT_SHA}"
  # Expiration period before artifacts expire.
  # FIXME: Currently variable expansion is bugged and is fixed. (See: https://gitlab.com/gitlab-org/gitlab/-/issues/365855)
  SF_ARTIFACT_EXPIRE: "2 days"

# Template to dump all environment variables.
.tpl-env-dump:
  # Do not need the cache for this one.
  cache: []
  before_script:
    - logger  --tag "${SF_LOG_TAG}" "'$(pwd)'"
    - echo "Working Directory=$(pwd)"
    - echo "Environment Dump" && printenv
  script:
    - echo "..."

# Template to deploy only when having on the release branch.
.tpl-deploy:
  rules:
    - if: $CI_COMMIT_BRANCH == $SF_RELEASE_BRANCH_NAME

# Template to reference to for the single script line only.
.tpl-log-script:
  script:
    # Log to syslog to be able to see execution flow.
    - logger --tag "${SF_LOG_TAG}" "Script => '$(pwd)'"

